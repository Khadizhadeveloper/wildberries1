from aiogram import Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import requests
from datetime import datetime, timedelta
import logging

logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()          # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WB_SALES_URL = "https://statistics-api.wildberries.ru/api/v1/supplier/sales"
API_KEY = "eyJhbGciOiJFUzI1NiIsImtpZCI6IjIwMjQxMjE3djEiLCJ0eXAiOiJKV1QifQ.eyJlbnQiOjEsImV4cCI6MTc1MDY1MDU0NiwiaWQiOiIwMTkzZWYwZS1kMzc0LTcxMjUtODEwZC1jZGJkYjcyYjI0YmQiLCJpaWQiOjU2Mjc5OTIxLCJvaWQiOjEzMDMyMjMsInMiOjEwNzM3NDk3NTgsInNpZCI6IjhkYjJmYmFjLWZjOTUtNDQzMy05OWVhLTE1ZjljNmI5ODUxMiIsInQiOmZhbHNlLCJ1aWQiOjU2Mjc5OTIxfQ.YMl4wjsGjfF00JfP_H6WMNvJainxTmjSC2HyjfHsbQWO1OEPYrrz8S_q-W2BptXLz7ZTIgC0f1n72FJgzEB4ZA"

router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
def get_sales_data(api_key, date):
    headers = {"Authorization": f"Bearer {api_key}"}
    params = {"dateFrom": date, "dateTo": date}
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ {date}")
        response = requests.get(WB_SALES_URL, headers=headers, params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.HTTPError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date}: {e}")
        return f"HTTP –æ—à–∏–±–∫–∞: {e}\n–û—Ç–≤–µ—Ç –æ—Ç API: {response.text}"
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date}: {e}")
        return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫
def calculate_metrics(sales_data):
    logger.info("–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥–∞–∂")
    total_sales = sum(item.get("totalPrice", 0) for item in sales_data)
    total_commission = sum(item.get("paymentSaleAmount", 0) for item in sales_data)
    total_discounts = sum(item.get("discountPercent", 0) * item.get("totalPrice", 0) / 100 for item in sales_data)
    total_acquiring = sum((item.get("forPay", 0) * item.get("spp", 0) / 100) for item in sales_data)
    total_logistics = sum(item.get("finishedPrice", 0) - item.get("forPay", 0) for item in sales_data)
    total_storage = 0
    units_sold = len(sales_data)
    avg_price = total_sales / units_sold if units_sold > 0 else 0

    return {
        "total_sales": total_sales,
        "total_commission": total_commission,
        "total_discounts": total_discounts,
        "total_acquiring": total_acquiring,
        "total_logistics": total_logistics,
        "total_storage": total_storage,
        "units_sold": units_sold,
        "avg_price": avg_price,
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report
@router.message(Command("report"))
async def report_handler(message: Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /report –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="period:today")],
        [InlineKeyboardButton(text="–í—á–µ—Ä–∞", callback_data="period:yesterday")],
        [InlineKeyboardButton(text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="period:last_7_days")],
        [InlineKeyboardButton(text="–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="period:custom_period")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
@router.callback_query(lambda c: c.data.startswith("period:"))
async def period_callback_handler(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    period = callback.data.split(":")[1]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.now()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if period == "today":
        date_from = today.strftime("%Y-%m-%d")
        date_to = date_from
    elif period == "yesterday":
        yesterday = today - timedelta(days=1)
        date_from = yesterday.strftime("%Y-%m-%d")
        date_to = date_from
    elif period == "last_7_days":
        date_from = (today - timedelta(days=7)).strftime("%Y-%m-%d")
        date_to = today.strftime("%Y-%m-%d")
    elif period == "custom_period":
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-07-01):")
        return  # –û–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        sales_data = get_sales_data(API_KEY, date_from)

        # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, –≤—ã–≤–æ–¥–∏–º –µ–≥–æ
        if isinstance(sales_data, str):
            await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {sales_data}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
        if not sales_data:
            await callback.message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ {date_from}.")
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = calculate_metrics(sales_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = (
            f"üìä *–û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ {date_from}*\n\n"
            f"- üí∞ *–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂:* {metrics['total_sales']} —Ä—É–±.\n"
            f"- üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü:* {metrics['units_sold']}\n"
            f"- üìä *–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:* {metrics['avg_price']:.2f} —Ä—É–±.\n"
            f"- üè¶ *–ö–æ–º–∏—Å—Å–∏—è Wildberries:* {metrics['total_commission']} —Ä—É–±.\n"
            f"- üí∏ *–°–∫–∏–¥–∫–∏ Wildberries:* {metrics['total_discounts']:.2f} —Ä—É–±.\n"
            f"- üèß *–ö–æ–º–∏—Å—Å–∏—è —ç–∫–≤–∞–π—Ä–∏–Ω–≥–∞:* {metrics['total_acquiring']:.2f} —Ä—É–±.\n"
            f"- üöö *–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∏:* {metrics['total_logistics']:.2f} —Ä—É–±.\n"
            f"- üì¶ *–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è:* {metrics['total_storage']} —Ä—É–±.\n"
        )

        await callback.message.answer(report, parse_mode="Markdown")
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
