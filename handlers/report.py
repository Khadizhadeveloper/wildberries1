from aiogram import Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import requests
from datetime import datetime, timedelta
import logging

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

WB_SALES_URL = "https://statistics-api.wildberries.ru/api/v1/supplier/sales"
API_KEY = "eyJhbGciOiJFUzI1NiIsImtpZCI6IjIwMjQxMjE3djEiLCJ0eXAiOiJKV1QifQ.eyJlbnQiOjEsImV4cCI6MTc1MDY1MDU0NiwiaWQiOiIwMTkzZWYwZS1kMzc0LTcxMjUtODEwZC1jZGJkYjcyYjI0YmQiLCJpaWQiOjU2Mjc5OTIxLCJvaWQiOjEzMDMyMjMsInMiOjEwNzM3NDk3NTgsInNpZCI6IjhkYjJmYmFjLWZjOTUtNDQzMy05OWVhLTE1ZjljNmI5ODUxMiIsInQiOmZhbHNlLCJ1aWQiOjU2Mjc5OTIxfQ.YMl4wjsGjfF00JfP_H6WMNvJainxTmjSC2HyjfHsbQWO1OEPYrrz8S_q-W2BptXLz7ZTIgC0f1n72FJgzEB4ZA"

router = Router()

user_data = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è



def get_sales_data(api_key, date_from, date_to):
    headers = {"Authorization": f"Bearer {api_key}"}
    params = {"dateFrom": date_from, "dateTo": date_to}
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö —Å {date_from} –ø–æ {date_to}")
        response = requests.get(WB_SALES_URL, headers=headers, params=params)
        response.encoding = "utf-8"  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç API (–¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏): {response.text[:500]}")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π JSON
        if not response.text.strip().startswith("[") or not response.text.strip().endswith("]"):
            logger.error("–û—Ç–≤–µ—Ç API –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON.")
            return "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."
        # –ü–∞—Ä—Å–∏–Ω–≥ JSON
        return response.json()
    except requests.exceptions.HTTPError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e}")
        return f"HTTP –æ—à–∏–±–∫–∞: {e}\n–û—Ç–≤–µ—Ç –æ—Ç API: {response.text[:500]}"
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö: {e}"
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫
def calculate_metrics(sales_data):
    logger.info("–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥–∞–∂")
    total_sales = sum(item.get("totalPrice", 0) for item in sales_data)
    total_commission = sum(item.get("paymentSaleAmount", 0) for item in sales_data)
    total_discounts = sum(item.get("discountPercent", 0) * item.get("totalPrice", 0) / 100 for item in sales_data)
    total_acquiring = sum((item.get("forPay", 0) * item.get("spp", 0) / 100) for item in sales_data)
    total_logistics = sum(item.get("finishedPrice", 0) - item.get("forPay", 0) for item in sales_data)
    total_storage = 0
    units_sold = len(sales_data)
    avg_price = total_sales / units_sold if units_sold > 0 else 0

    return {
        "total_sales": total_sales,
        "total_commission": total_commission,
        "total_discounts": total_discounts,
        "total_acquiring": total_acquiring,
        "total_logistics": total_logistics,
        "total_storage": total_storage,
        "units_sold": units_sold,
        "avg_price": avg_price,
    }


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report
@router.message(Command("report"))
async def report_handler(message: Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /report –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="period:today")],
        [InlineKeyboardButton(text="–í—á–µ—Ä–∞", callback_data="period:yesterday")],
        [InlineKeyboardButton(text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="period:last_7_days")],
        [InlineKeyboardButton(text="–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="period:custom_period")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
@router.callback_query(lambda c: c.data.startswith("period:"))
async def period_callback_handler(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    period = callback.data.split(":")[1]

    today = datetime.now()

    if period == "today":
        date_from = date_to = today.strftime("%Y-%m-%d")
    elif period == "yesterday":
        yesterday = today - timedelta(days=1)
        date_from = date_to = yesterday.strftime("%Y-%m-%d")
    elif period == "last_7_days":
        date_from = (today - timedelta(days=7)).strftime("%Y-%m-%d")
        date_to = today.strftime("%Y-%m-%d")
    elif period == "custom_period":
        user_data[callback.from_user.id] = {"step": "start_date"}
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        return

    await generate_report(callback.message, date_from, date_to)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
@router.message()
async def handle_custom_dates(message: Message):
    user_id = message.from_user.id

    if user_id in user_data and "step" in user_data[user_id]:
        step = user_data[user_id]["step"]

        if step == "start_date":
            try:
                start_date = datetime.strptime(message.text, "%Y-%m-%d").strftime("%Y-%m-%d")
                user_data[user_id]["start_date"] = start_date
                user_data[user_id]["step"] = "end_date"
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
            except ValueError:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–ì–ì–ì–ì-–ú–ú-–î–î).")

        elif step == "end_date":
            try:
                end_date = datetime.strptime(message.text, "%Y-%m-%d").strftime("%Y-%m-%d")
                start_date = user_data[user_id]["start_date"]

                del user_data[user_id]  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                await generate_report(message, start_date, end_date)
            except ValueError:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–ì–ì–ì–ì-–ú–ú-–î–î).")


async def generate_report(message, date_from, date_to):
    try:
        sales_data = get_sales_data(API_KEY, date_from, date_to)

        if isinstance(sales_data, str):
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {sales_data}")
            return

        if not sales_data:
            await message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö —Å {date_from} –ø–æ {date_to}.")
            return

        metrics = calculate_metrics(sales_data)

        report = (
            f"üìä *–û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö —Å {date_from} –ø–æ {date_to}*\n\n"
            f"- üí∞ *–û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂:* {metrics['total_sales']} —Ä—É–±.\n"
            f"- üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü:* {metrics['units_sold']}\n"
            f"- üìä *–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:* {metrics['avg_price']:.2f} —Ä—É–±.\n"
            f"- üè¶ *–ö–æ–º–∏—Å—Å–∏—è Wildberries:* {metrics['total_commission']} —Ä—É–±.\n"
            f"- üí∏ *–°–∫–∏–¥–∫–∏ Wildberries:* {metrics['total_discounts']:.2f} —Ä—É–±.\n"
            f"- üèß *–ö–æ–º–∏—Å—Å–∏—è —ç–∫–≤–∞–π—Ä–∏–Ω–≥–∞:* {metrics['total_acquiring']:.2f} —Ä—É–±.\n"
            f"- üöö *–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∏:* {metrics['total_logistics']:.2f} —Ä—É–±.\n"
            f"- üì¶ *–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è:* {metrics['total_storage']} —Ä—É–±.\n"
        )

        await message.answer(report, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

